import random

# input for suits and ranks and a dictionary for values
suits = ('Hearts', 'Diamonds', 'Spades', 'Clubs')
ranks = ('Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten', 'Jack', 'Queen', 'King', 'Ace')
values = {'Two':2, 'Three':3, 'Four':4, 'Five':5, 'Six':6, 'Seven':7, 'Eight':8, 'Nine':9, 'Ten':10, 'Jack':10,
         'Queen':10, 'King':10, 'Ace':11}
  
# Card class to define suit, rank and value
class Card:
    def __init__(self, suit, rank, value):
        self.suit = suit
        self.rank = rank
        self.value = value
    def __str__(self):
        return('{} of {}'.format(str(self.rank), self.suit))
        
# Deck class to create all possible card objects and shuffle/deal the deck       
class Deck:
    def __init__(self,suits,ranks):
        self.deck = []  # start with an empty list
        for suit in suits:
            for rank in ranks:
                (self.deck).append(Card(suit,rank,0))
    def __str__(self):
        s=''
        for i in self.deck:
            s += '{}\n'.format(str(i)) 
        return s
    def shuffle(self):
        random.shuffle(self.deck)   
    def deal(self):
        self.shuffle()
        return self.deck.pop()
  
 # Hand class to add card in the hand and adjust for ace
 class Hand:
    def __init__(self):
        self.cards = []  # start with an empty list as we did in the Deck class
        self.value = 0   # start with zero value
        self.aces = 0    # add an attribute to keep track of aces
    def add_card(self,card):
        self.cards.append(card)         # single card object from deal 
        self.value += values[card.rank]   
        if card.rank == 'Ace':
            self.aces+=1 
    def adjust_for_ace(self):
        # default ace is 11
        # if total value is > 21 and  have an ace then turn that ace to a 1
        while self.value > 21 and self.aces > 0:
            self.value -= 10
            self.aces -= 1
 
 # Chips class to intialize the current amount and bets 
 class Chips:
    def __init__(self):
        while True:
            try:
                self.total = int(input('Enter your total chips amount = $'))  # Supplied by a user input
            except:
                print('Please enter amount again')
                continue
            else:
                break
        self.bet = 0       
    def win_bet(self,bet):
        self.total += bet
        return self.total
    def lose_bet(self,bet):
        self.total -= bet
        return self.total
 
 # function to take bets      
 def take_bet(chips):
    while True:
        try:
            chips.bet = int(input('Enter amount you want to bet = $'))
        except:
            print('Please enter amount again')
            continue
        else:
            if chips.total < chips.bet:
                print('You bet more than your chips')
                continue
            else:
                print('Bet placed')
                break 
     
 # Function to hit and add card 
 def hit(deck,hand):
    hand.add_card(deck.deal())
    hand.adjust_for_ace()
  
 # Function to hit or stand 
 def hit_or_stand(deck,hand):
    global playing   # to control an upcoming while loop  
    while True:
        move = input("Hit or Stand? ")
        if move.lower() == "hit":
            hit(deck,hand)
            break
        elif move.lower() == 'stand':
            playing = False
            break
        else:
            print('please enter your move again')
            continue
            
 # To display cards
 def show_some(player,dealer):
    print('---------------------------------------------------------')
    print("The player's cards are: ")
    for i in player.cards:
        print(i)
    print("Total: {}".format(player.value))
    print('---------------------------------------------------------')
    print("The dealer's card is: {}".format(dealer.cards[0]))
    
def show_all(player,dealer):
    print('---------------------------------------------------------')
    print('~~~~~~~~~~~~~~~~~~~~~~~~Finally~~~~~~~~~~~~~~~~~~~~~~~~~~')
    print("The player's cards are:")
    for i in player.cards:
        print(i)
    print("Total: {} ".format(player.value))
    print('---------------------------------------------------------')
    print("The dealer's cards are:")
    for j in dealer.cards:
        print(j)
    print("Total: {}".format(dealer.value))
    
 # To handle end of game scenarios 
def player_busts(player, dealer, chips):
        print('Result: Bust')
        chips.lose_bet(chips.bet)

def player_wins(player,dealer,chips):
        print('Result: You win')
        chips.win_bet(chips.bet)

def black_jack(player,chips):
        print('Result: BlackJack')
        chips.win_bet(chips.bet*1.5)

def dealer_busts(player,dealer,chips):
        chips.win_bet(chips.bet)
        print('Result: Dealer Bust')
    
def dealer_wins(player, dealer, chips):
        print('Result: Dealer wins and you lose')
        chips.lose_bet(chips.bet)        
    
def push(player,dealer):
        print('Result: Push')
